create sequence "public"."id_seq";

revoke delete on table "public"."notifications " from "anon";

revoke insert on table "public"."notifications " from "anon";

revoke references on table "public"."notifications " from "anon";

revoke select on table "public"."notifications " from "anon";

revoke trigger on table "public"."notifications " from "anon";

revoke truncate on table "public"."notifications " from "anon";

revoke update on table "public"."notifications " from "anon";

revoke delete on table "public"."notifications " from "authenticated";

revoke insert on table "public"."notifications " from "authenticated";

revoke references on table "public"."notifications " from "authenticated";

revoke select on table "public"."notifications " from "authenticated";

revoke trigger on table "public"."notifications " from "authenticated";

revoke truncate on table "public"."notifications " from "authenticated";

revoke update on table "public"."notifications " from "authenticated";

revoke delete on table "public"."notifications " from "service_role";

revoke insert on table "public"."notifications " from "service_role";

revoke references on table "public"."notifications " from "service_role";

revoke select on table "public"."notifications " from "service_role";

revoke trigger on table "public"."notifications " from "service_role";

revoke truncate on table "public"."notifications " from "service_role";

revoke update on table "public"."notifications " from "service_role";

alter table "public"."notifications " drop constraint "notifications _user_id_fkey";

alter table "public"."notifications " drop constraint "notifications _pkey";

drop index if exists "public"."notifications _pkey";

drop table "public"."notifications ";

create table "public"."notifications" (
    "notification_id" bigint generated by default as identity not null,
    "timestamp" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "message" text,
    "status" character varying not null default 'unread'::character varying,
    "notification_type" character varying,
    "is_read" boolean default false
);


alter table "public"."notifications" enable row level security;

create table "public"."support_chat" (
    "chat_id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "agent_id" uuid,
    "message" text,
    "timestamp" timestamp with time zone,
    "is_agent_message" boolean
);


alter table "public"."routes" add column "new_id" bigint;

CREATE UNIQUE INDEX support_chat_pkey ON public.support_chat USING btree (chat_id);

CREATE UNIQUE INDEX "notifications _pkey" ON public.notifications USING btree (notification_id);

alter table "public"."notifications" add constraint "notifications _pkey" PRIMARY KEY using index "notifications _pkey";

alter table "public"."support_chat" add constraint "support_chat_pkey" PRIMARY KEY using index "support_chat_pkey";

alter table "public"."notifications" add constraint "notifications _user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."notifications" validate constraint "notifications _user_id_fkey";

alter table "public"."support_chat" add constraint "public_support_chat_agent_id_fkey" FOREIGN KEY (agent_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."support_chat" validate constraint "public_support_chat_agent_id_fkey";

alter table "public"."support_chat" add constraint "public_support_chat_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."support_chat" validate constraint "public_support_chat_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user_test()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$function$
;

grant delete on table "public"."notifications" to "anon";

grant insert on table "public"."notifications" to "anon";

grant references on table "public"."notifications" to "anon";

grant select on table "public"."notifications" to "anon";

grant trigger on table "public"."notifications" to "anon";

grant truncate on table "public"."notifications" to "anon";

grant update on table "public"."notifications" to "anon";

grant delete on table "public"."notifications" to "authenticated";

grant insert on table "public"."notifications" to "authenticated";

grant references on table "public"."notifications" to "authenticated";

grant select on table "public"."notifications" to "authenticated";

grant trigger on table "public"."notifications" to "authenticated";

grant truncate on table "public"."notifications" to "authenticated";

grant update on table "public"."notifications" to "authenticated";

grant delete on table "public"."notifications" to "service_role";

grant insert on table "public"."notifications" to "service_role";

grant references on table "public"."notifications" to "service_role";

grant select on table "public"."notifications" to "service_role";

grant trigger on table "public"."notifications" to "service_role";

grant truncate on table "public"."notifications" to "service_role";

grant update on table "public"."notifications" to "service_role";

grant delete on table "public"."support_chat" to "anon";

grant insert on table "public"."support_chat" to "anon";

grant references on table "public"."support_chat" to "anon";

grant select on table "public"."support_chat" to "anon";

grant trigger on table "public"."support_chat" to "anon";

grant truncate on table "public"."support_chat" to "anon";

grant update on table "public"."support_chat" to "anon";

grant delete on table "public"."support_chat" to "authenticated";

grant insert on table "public"."support_chat" to "authenticated";

grant references on table "public"."support_chat" to "authenticated";

grant select on table "public"."support_chat" to "authenticated";

grant trigger on table "public"."support_chat" to "authenticated";

grant truncate on table "public"."support_chat" to "authenticated";

grant update on table "public"."support_chat" to "authenticated";

grant delete on table "public"."support_chat" to "service_role";

grant insert on table "public"."support_chat" to "service_role";

grant references on table "public"."support_chat" to "service_role";

grant select on table "public"."support_chat" to "service_role";

grant trigger on table "public"."support_chat" to "service_role";

grant truncate on table "public"."support_chat" to "service_role";

grant update on table "public"."support_chat" to "service_role";

create policy "Enable read for users based on user_id"
on "public"."notifications"
as permissive
for select
to authenticated
using ((auth.uid() = user_id));



