
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."assign_role_to_new_users"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$begin
  insert into public.user_roles (user_id)
  values (new.id);
  return new;
end;$$;

ALTER FUNCTION "public"."assign_role_to_new_users"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  insert into public.profiles (id, name, company_name, email, phone, skype_id)
  values (new.id, new.raw_user_meta_data->>'name', new.raw_user_meta_data->>'company_name', new.email, new.raw_user_meta_data->>'phone', new.raw_user_meta_data->>'skype_id')
  on conflict (id)
  do update set
    name = excluded.name,
    company_name = excluded.company_name,
    email = excluded.email,
    phone = excluded.phone,
    skype_id = excluded.skype_id;
  return new;
end;$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."route_insert_update_trigger"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$BEGIN
    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
        INSERT INTO routes_history(route_id, asr, acd, destination, destination_code,rate, selling_rate,route_type,ports,pdd)
        VALUES(NEW.id, NEW.asr, NEW.acd, NEW.destination, NEW.destination_code, NEW.rate, NEW.selling_rate, NEW.route_type, NEW.ports, NEW.pdd);
    END IF;
    RETURN NEW;
END;$$;

ALTER FUNCTION "public"."route_insert_update_trigger"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."target_insert_update_trigger"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$BEGIN
    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
        INSERT INTO targets_history(route_id, asr, acd, destination, destination_code,rate, buying_rate,route_type,ports,pdd)
        VALUES(NEW.id, NEW.asr, NEW.acd, NEW.destination, NEW.destination_code, NEW.rate, NEW.buying_rate, NEW.route_type, NEW.ports, NEW.pdd);
    END IF;
    RETURN NEW;
END;$$;

ALTER FUNCTION "public"."target_insert_update_trigger"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."config" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text"),
    "details" "jsonb",
    "type" "text"
);

ALTER TABLE "public"."config" OWNER TO "postgres";

ALTER TABLE "public"."config" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."bank_accounts_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."gateways" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "client_id" "uuid" NOT NULL,
    "route_id" "uuid" NOT NULL,
    "status" "text" NOT NULL,
    "payment_type" "text",
    "created_at" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text"),
    "name" "text",
    "rate" "text",
    "total_calls" numeric,
    "total_duration" numeric,
    "updated_on" timestamp with time zone
);

ALTER TABLE "public"."gateways" OWNER TO "postgres";

CREATE SEQUENCE IF NOT EXISTS "public"."id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."id_seq" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."invoices" (
    "invoice_id" smallint NOT NULL,
    "date_issued" timestamp with time zone DEFAULT "now"(),
    "total_amount" "text",
    "status" "text" DEFAULT 'pending'::"text",
    "paid_at" timestamp with time zone,
    "description" "text",
    "date_due" timestamp with time zone,
    "bill_to" "jsonb",
    "invoice_to" "uuid",
    "note" "text",
    "balance" "text"
);

ALTER TABLE "public"."invoices" OWNER TO "postgres";

COMMENT ON TABLE "public"."invoices" IS 'This table stores information about generated invoices for completed deals.';

ALTER TABLE "public"."invoices" ALTER COLUMN "invoice_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."invoices_invoice_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."notifications" (
    "notification_id" bigint NOT NULL,
    "timestamp" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "message" "text",
    "status" character varying DEFAULT 'unread'::character varying NOT NULL,
    "notification_type" character varying,
    "is_read" boolean DEFAULT false
);

ALTER TABLE "public"."notifications" OWNER TO "postgres";

ALTER TABLE "public"."notifications" ALTER COLUMN "notification_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."notifications_notification_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."payments" (
    "payment_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "invoice_id" smallint NOT NULL,
    "amount" "text" NOT NULL,
    "payment_status" character varying DEFAULT 'paid'::character varying NOT NULL,
    "paid_at" timestamp with time zone NOT NULL,
    "user_id" "uuid",
    "gateway" "uuid",
    "payment_method" "text"
);

ALTER TABLE "public"."payments" OWNER TO "postgres";

COMMENT ON TABLE "public"."payments" IS 'This table stores payment details from buyers and payouts to sellers.';

ALTER TABLE "public"."payments" ALTER COLUMN "payment_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."payments_payment_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."phone_codes" (
    "code" bigint NOT NULL,
    "name" "text",
    "value" "text"
);

ALTER TABLE "public"."phone_codes" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "name" "text" DEFAULT ''::"text",
    "company_name" "text" DEFAULT ''::"text",
    "email" "text" DEFAULT ''::"text",
    "phone" "text" DEFAULT ''::"text",
    "skype_id" "text" DEFAULT ''::"text",
    "role" "text" DEFAULT ''::"text",
    "finance_department" "json" DEFAULT '{}'::"json",
    "noc_department" "json" DEFAULT '{}'::"json",
    "sales_department" "json" DEFAULT '{}'::"json",
    "payment_method" "jsonb",
    "agent_id" "text" DEFAULT ''::"text",
    "vos_vendor_id" "text" DEFAULT ''::"text",
    "vos_client_id" "text" DEFAULT ''::"text",
    "balance" "text" DEFAULT '0'::"text",
    "over_draft" "text" DEFAULT '0'::"text",
    "departments" "json"
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."purchase_requests" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "client_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "route_id" "uuid" NOT NULL,
    "status" "text" DEFAULT 'pending'::"text" NOT NULL,
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "payment_type" "text" NOT NULL,
    "communication_status" "text" DEFAULT 'not_contacted'::"text" NOT NULL,
    "whatsapp_no" "text",
    "ip" "text",
    "vos_status" "text" DEFAULT 'pending'::"text"
);

ALTER TABLE "public"."purchase_requests" OWNER TO "postgres";

COMMENT ON TABLE "public"."purchase_requests" IS 'Purchase requestd initiated by buyers';

CREATE TABLE IF NOT EXISTS "public"."roles" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "slug" "text" NOT NULL
);

ALTER TABLE "public"."roles" OWNER TO "postgres";

ALTER TABLE "public"."roles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."roles_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."routes" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "vendor_id" "uuid" DEFAULT "auth"."uid"(),
    "destination" character varying(100) NOT NULL,
    "rate" "text" NOT NULL,
    "route_type" character varying(50) NOT NULL,
    "asr" character varying NOT NULL,
    "acd" character varying NOT NULL,
    "ports" character varying NOT NULL,
    "verification" "text" DEFAULT 'pending'::"text" NOT NULL,
    "verification_by" "uuid",
    "verified_at" timestamp without time zone,
    "created_at" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text"),
    "updated_at" timestamp with time zone,
    "destination_code" character varying NOT NULL,
    "pdd" character varying NOT NULL,
    "selling_rate" "text" DEFAULT '0'::"text" NOT NULL,
    "new_id" bigint
);

ALTER TABLE "public"."routes" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."routes_history" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "destination" character varying(100) NOT NULL,
    "rate" "text" NOT NULL,
    "route_type" character varying(50) NOT NULL,
    "asr" character varying NOT NULL,
    "acd" character varying NOT NULL,
    "ports" character varying NOT NULL,
    "destination_code" character varying NOT NULL,
    "pdd" character varying NOT NULL,
    "selling_rate" "text" DEFAULT '0'::"text" NOT NULL,
    "effective_date" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text"),
    "route_id" "uuid"
);

ALTER TABLE "public"."routes_history" OWNER TO "postgres";

COMMENT ON TABLE "public"."routes_history" IS 'This is a history of routes';

CREATE TABLE IF NOT EXISTS "public"."selected_routes" (
    "route_id" "uuid" NOT NULL,
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL
);

ALTER TABLE "public"."selected_routes" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."support_chat" (
    "chat_id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "agent_id" "uuid",
    "message" "text",
    "timestamp" timestamp with time zone,
    "is_agent_message" boolean
);

ALTER TABLE "public"."support_chat" OWNER TO "postgres";

ALTER TABLE "public"."support_chat" ALTER COLUMN "chat_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."support_chat_chat_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."targets" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "client_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "destination" character varying(100) NOT NULL,
    "rate" "text" NOT NULL,
    "route_type" character varying(50) NOT NULL,
    "asr" character varying NOT NULL,
    "acd" character varying NOT NULL,
    "ports" character varying NOT NULL,
    "created_at" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text"),
    "updated_at" timestamp with time zone,
    "destination_code" character varying NOT NULL,
    "pdd" character varying NOT NULL,
    "buying_rate" numeric DEFAULT '0'::numeric NOT NULL
);

ALTER TABLE "public"."targets" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."targets_history" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "destination" character varying(100) NOT NULL,
    "rate" "text" NOT NULL,
    "route_type" character varying(50) NOT NULL,
    "asr" character varying NOT NULL,
    "acd" character varying NOT NULL,
    "ports" character varying NOT NULL,
    "destination_code" character varying NOT NULL,
    "pdd" character varying NOT NULL,
    "buying_rate" numeric DEFAULT '0'::numeric NOT NULL,
    "effective_date" timestamp with time zone,
    "target_id" "uuid"
);

ALTER TABLE "public"."targets_history" OWNER TO "postgres";

COMMENT ON TABLE "public"."targets_history" IS 'This is a history of targets';

CREATE TABLE IF NOT EXISTS "public"."user_roles" (
    "user_id" "uuid" NOT NULL,
    "role" "text" DEFAULT 'user'::"text"
);

ALTER TABLE "public"."user_roles" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."wallet" (
    "wallet_id" bigint NOT NULL,
    "user_id" "uuid",
    "ballence" numeric DEFAULT 0.00,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone
);

ALTER TABLE "public"."wallet" OWNER TO "postgres";

ALTER TABLE "public"."wallet" ALTER COLUMN "wallet_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."wallet_wallet_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."watchlist" (
    "id" bigint NOT NULL,
    "route_id" "uuid" NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"()
);

ALTER TABLE "public"."watchlist" OWNER TO "postgres";

ALTER TABLE "public"."watchlist" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."watchlist_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."config"
    ADD CONSTRAINT "bank_accounts_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."targets"
    ADD CONSTRAINT "buying_targets_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."invoices"
    ADD CONSTRAINT "invoices_pkey" PRIMARY KEY ("invoice_id");

ALTER TABLE ONLY "public"."notifications"
    ADD CONSTRAINT "notifications _pkey" PRIMARY KEY ("notification_id");

ALTER TABLE ONLY "public"."payments"
    ADD CONSTRAINT "payments_pkey" PRIMARY KEY ("payment_id");

ALTER TABLE ONLY "public"."phone_codes"
    ADD CONSTRAINT "phone_codes_code_key" UNIQUE ("code");

ALTER TABLE ONLY "public"."phone_codes"
    ADD CONSTRAINT "phone_codes_pkey" PRIMARY KEY ("code");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."purchase_requests"
    ADD CONSTRAINT "purchase_requests_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."roles"
    ADD CONSTRAINT "roles_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."roles"
    ADD CONSTRAINT "roles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."roles"
    ADD CONSTRAINT "roles_slug_key" UNIQUE ("slug");

ALTER TABLE ONLY "public"."gateways"
    ADD CONSTRAINT "route_conncetions_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."routes"
    ADD CONSTRAINT "route_offers_posts_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."routes_history"
    ADD CONSTRAINT "routes_history_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."selected_routes"
    ADD CONSTRAINT "selected_routes_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."support_chat"
    ADD CONSTRAINT "support_chat_pkey" PRIMARY KEY ("chat_id");

ALTER TABLE ONLY "public"."targets_history"
    ADD CONSTRAINT "targets_history_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_pkey" PRIMARY KEY ("user_id");

ALTER TABLE ONLY "public"."wallet"
    ADD CONSTRAINT "wallet_pkey" PRIMARY KEY ("wallet_id");

ALTER TABLE ONLY "public"."wallet"
    ADD CONSTRAINT "wallet_wallet_id_key" UNIQUE ("wallet_id");

ALTER TABLE ONLY "public"."watchlist"
    ADD CONSTRAINT "watchlist_pkey" PRIMARY KEY ("id");

CREATE OR REPLACE TRIGGER "route_insert_update" AFTER INSERT OR UPDATE ON "public"."routes" FOR EACH ROW EXECUTE FUNCTION "public"."route_insert_update_trigger"();

CREATE OR REPLACE TRIGGER "target_insert_update" AFTER INSERT OR UPDATE ON "public"."targets" FOR EACH ROW EXECUTE FUNCTION "public"."target_insert_update_trigger"();

CREATE OR REPLACE TRIGGER "trigger_new_user" AFTER INSERT ON "public"."profiles" FOR EACH ROW EXECUTE FUNCTION "public"."assign_role_to_new_users"();

ALTER TABLE ONLY "public"."gateways"
    ADD CONSTRAINT "gateways_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."gateways"
    ADD CONSTRAINT "gateways_route_id_fkey" FOREIGN KEY ("route_id") REFERENCES "public"."routes"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."invoices"
    ADD CONSTRAINT "invoices_invoice_to_fkey" FOREIGN KEY ("invoice_to") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."notifications"
    ADD CONSTRAINT "notifications _user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."payments"
    ADD CONSTRAINT "payments_gateway_fkey" FOREIGN KEY ("gateway") REFERENCES "public"."gateways"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."payments"
    ADD CONSTRAINT "payments_invoice_id_fkey" FOREIGN KEY ("invoice_id") REFERENCES "public"."invoices"("invoice_id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."payments"
    ADD CONSTRAINT "payments_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."support_chat"
    ADD CONSTRAINT "public_support_chat_agent_id_fkey" FOREIGN KEY ("agent_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."support_chat"
    ADD CONSTRAINT "public_support_chat_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."targets_history"
    ADD CONSTRAINT "public_targets_history_target_id_fkey" FOREIGN KEY ("target_id") REFERENCES "public"."targets"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "public_user_roles_role_fkey" FOREIGN KEY ("role") REFERENCES "public"."roles"("slug") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "public_user_roles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."purchase_requests"
    ADD CONSTRAINT "purchase_requests_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."purchase_requests"
    ADD CONSTRAINT "purchase_requests_route_id_fkey" FOREIGN KEY ("route_id") REFERENCES "public"."routes"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."routes_history"
    ADD CONSTRAINT "routes_history_route_id_fkey" FOREIGN KEY ("route_id") REFERENCES "public"."routes"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."routes"
    ADD CONSTRAINT "routes_vendor_id_fkey" FOREIGN KEY ("vendor_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."selected_routes"
    ADD CONSTRAINT "selected_routes_route_id_fkey" FOREIGN KEY ("route_id") REFERENCES "public"."routes"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."selected_routes"
    ADD CONSTRAINT "selected_routes_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."targets"
    ADD CONSTRAINT "targets_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."wallet"
    ADD CONSTRAINT "wallet_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."watchlist"
    ADD CONSTRAINT "watchlist_route_id_fkey" FOREIGN KEY ("route_id") REFERENCES "public"."routes"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."watchlist"
    ADD CONSTRAINT "watchlist_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

CREATE POLICY "Allow all operations to authenticated users" ON "public"."selected_routes" TO "authenticated" USING (("user_id" = "auth"."uid"())) WITH CHECK (("user_id" = "auth"."uid"()));

CREATE POLICY "Enable insert for all users" ON "public"."phone_codes" FOR INSERT WITH CHECK (true);

CREATE POLICY "Enable read access for all users" ON "public"."phone_codes" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."roles" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."user_roles" FOR SELECT USING (("user_id" = "auth"."uid"()));

CREATE POLICY "Enable read for users based on user_id" ON "public"."notifications" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Public profiles are viewable by everyone." ON "public"."profiles" FOR SELECT USING (("id" = "auth"."uid"()));

CREATE POLICY "Users can update own profile." ON "public"."profiles" FOR UPDATE TO "authenticated" USING (("id" = "auth"."uid"())) WITH CHECK (("id" = "auth"."uid"()));

CREATE POLICY "all operation for authenticated users" ON "public"."payments" TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "allow all" ON "public"."config" TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "allow all" ON "public"."invoices" TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "allow all for authenticated users" ON "public"."gateways" TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "allow all operations for authenticated users" ON "public"."targets_history" TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "allow all operations to authenticated users " ON "public"."purchase_requests" TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "allow delete for authenticated users" ON "public"."watchlist" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));

CREATE POLICY "allow for authenticated" ON "public"."routes_history" TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "allow insert for authenticated users" ON "public"."watchlist" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "allow select for authenticated users" ON "public"."watchlist" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));

CREATE POLICY "allow sellers to delete their own routes" ON "public"."routes" FOR DELETE TO "authenticated" USING (true);

CREATE POLICY "allow sellers to edit their routes" ON "public"."routes" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "allow user to read only" ON "public"."invoices" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "allow user to select" ON "public"."gateways" FOR SELECT TO "authenticated" USING (("client_id" = "auth"."uid"()));

CREATE POLICY "allow users to access" ON "public"."targets" USING (true) WITH CHECK (true);

CREATE POLICY "allow users to insert" ON "public"."gateways" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "allow users to insert" ON "public"."routes" FOR INSERT TO "authenticated" WITH CHECK (true);

ALTER TABLE "public"."config" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."gateways" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."invoices" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."notifications" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."payments" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."phone_codes" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."purchase_requests" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."roles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."routes" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."routes_history" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."selected_routes" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."targets" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."targets_history" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_roles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."wallet" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."watchlist" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."purchase_requests";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."routes";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."routes_history";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."selected_routes";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."targets";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."targets_history";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."assign_role_to_new_users"() TO "anon";
GRANT ALL ON FUNCTION "public"."assign_role_to_new_users"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."assign_role_to_new_users"() TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON FUNCTION "public"."route_insert_update_trigger"() TO "anon";
GRANT ALL ON FUNCTION "public"."route_insert_update_trigger"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."route_insert_update_trigger"() TO "service_role";

GRANT ALL ON FUNCTION "public"."target_insert_update_trigger"() TO "anon";
GRANT ALL ON FUNCTION "public"."target_insert_update_trigger"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."target_insert_update_trigger"() TO "service_role";

GRANT ALL ON TABLE "public"."config" TO "anon";
GRANT ALL ON TABLE "public"."config" TO "authenticated";
GRANT ALL ON TABLE "public"."config" TO "service_role";

GRANT ALL ON SEQUENCE "public"."bank_accounts_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."bank_accounts_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."bank_accounts_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."gateways" TO "anon";
GRANT ALL ON TABLE "public"."gateways" TO "authenticated";
GRANT ALL ON TABLE "public"."gateways" TO "service_role";

GRANT ALL ON SEQUENCE "public"."id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."invoices" TO "anon";
GRANT ALL ON TABLE "public"."invoices" TO "authenticated";
GRANT ALL ON TABLE "public"."invoices" TO "service_role";

GRANT ALL ON SEQUENCE "public"."invoices_invoice_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."invoices_invoice_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."invoices_invoice_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."notifications" TO "anon";
GRANT ALL ON TABLE "public"."notifications" TO "authenticated";
GRANT ALL ON TABLE "public"."notifications" TO "service_role";

GRANT ALL ON SEQUENCE "public"."notifications_notification_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."notifications_notification_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."notifications_notification_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."payments" TO "anon";
GRANT ALL ON TABLE "public"."payments" TO "authenticated";
GRANT ALL ON TABLE "public"."payments" TO "service_role";

GRANT ALL ON SEQUENCE "public"."payments_payment_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."payments_payment_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."payments_payment_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."phone_codes" TO "anon";
GRANT ALL ON TABLE "public"."phone_codes" TO "authenticated";
GRANT ALL ON TABLE "public"."phone_codes" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON TABLE "public"."purchase_requests" TO "anon";
GRANT ALL ON TABLE "public"."purchase_requests" TO "authenticated";
GRANT ALL ON TABLE "public"."purchase_requests" TO "service_role";

GRANT ALL ON TABLE "public"."roles" TO "anon";
GRANT ALL ON TABLE "public"."roles" TO "authenticated";
GRANT ALL ON TABLE "public"."roles" TO "service_role";

GRANT ALL ON SEQUENCE "public"."roles_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."roles_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."roles_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."routes" TO "anon";
GRANT ALL ON TABLE "public"."routes" TO "authenticated";
GRANT ALL ON TABLE "public"."routes" TO "service_role";

GRANT ALL ON TABLE "public"."routes_history" TO "anon";
GRANT ALL ON TABLE "public"."routes_history" TO "authenticated";
GRANT ALL ON TABLE "public"."routes_history" TO "service_role";

GRANT ALL ON TABLE "public"."selected_routes" TO "anon";
GRANT ALL ON TABLE "public"."selected_routes" TO "authenticated";
GRANT ALL ON TABLE "public"."selected_routes" TO "service_role";

GRANT ALL ON TABLE "public"."support_chat" TO "anon";
GRANT ALL ON TABLE "public"."support_chat" TO "authenticated";
GRANT ALL ON TABLE "public"."support_chat" TO "service_role";

GRANT ALL ON SEQUENCE "public"."support_chat_chat_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."support_chat_chat_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."support_chat_chat_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."targets" TO "anon";
GRANT ALL ON TABLE "public"."targets" TO "authenticated";
GRANT ALL ON TABLE "public"."targets" TO "service_role";

GRANT ALL ON TABLE "public"."targets_history" TO "anon";
GRANT ALL ON TABLE "public"."targets_history" TO "authenticated";
GRANT ALL ON TABLE "public"."targets_history" TO "service_role";

GRANT ALL ON TABLE "public"."user_roles" TO "anon";
GRANT ALL ON TABLE "public"."user_roles" TO "authenticated";
GRANT ALL ON TABLE "public"."user_roles" TO "service_role";

GRANT ALL ON TABLE "public"."wallet" TO "anon";
GRANT ALL ON TABLE "public"."wallet" TO "authenticated";
GRANT ALL ON TABLE "public"."wallet" TO "service_role";

GRANT ALL ON SEQUENCE "public"."wallet_wallet_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."wallet_wallet_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."wallet_wallet_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."watchlist" TO "anon";
GRANT ALL ON TABLE "public"."watchlist" TO "authenticated";
GRANT ALL ON TABLE "public"."watchlist" TO "service_role";

GRANT ALL ON SEQUENCE "public"."watchlist_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."watchlist_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."watchlist_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;

--
-- Dumped schema changes for auth and storage
--

CREATE OR REPLACE TRIGGER "on_auth_user_created" AFTER INSERT ON "auth"."users" FOR EACH ROW EXECUTE FUNCTION "public"."handle_new_user"();

CREATE OR REPLACE TRIGGER "on_auth_user_updated" AFTER UPDATE ON "auth"."users" FOR EACH ROW EXECUTE FUNCTION "public"."handle_new_user"();

