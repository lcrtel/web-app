create type "public"."statuses" as enum ('PENDING', 'VERIFIED', 'DECLINED');

create table "public"."tr_verifications" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "company_name" text,
    "website" text,
    "company_email" text,
    "user_id" uuid default auth.uid(),
    "status" statuses default 'PENDING'::statuses
);


alter table "public"."tr_verifications" enable row level security;

CREATE UNIQUE INDEX tr_verifications_pkey ON public.tr_verifications USING btree (id);

alter table "public"."tr_verifications" add constraint "tr_verifications_pkey" PRIMARY KEY using index "tr_verifications_pkey";

alter table "public"."tr_verifications" add constraint "tr_verifications_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."tr_verifications" validate constraint "tr_verifications_user_id_fkey";

grant delete on table "public"."tr_verifications" to "anon";

grant insert on table "public"."tr_verifications" to "anon";

grant references on table "public"."tr_verifications" to "anon";

grant select on table "public"."tr_verifications" to "anon";

grant trigger on table "public"."tr_verifications" to "anon";

grant truncate on table "public"."tr_verifications" to "anon";

grant update on table "public"."tr_verifications" to "anon";

grant delete on table "public"."tr_verifications" to "authenticated";

grant insert on table "public"."tr_verifications" to "authenticated";

grant references on table "public"."tr_verifications" to "authenticated";

grant select on table "public"."tr_verifications" to "authenticated";

grant trigger on table "public"."tr_verifications" to "authenticated";

grant truncate on table "public"."tr_verifications" to "authenticated";

grant update on table "public"."tr_verifications" to "authenticated";

grant delete on table "public"."tr_verifications" to "service_role";

grant insert on table "public"."tr_verifications" to "service_role";

grant references on table "public"."tr_verifications" to "service_role";

grant select on table "public"."tr_verifications" to "service_role";

grant trigger on table "public"."tr_verifications" to "service_role";

grant truncate on table "public"."tr_verifications" to "service_role";

grant update on table "public"."tr_verifications" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."tr_verifications"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access based on user_id"
on "public"."tr_verifications"
as permissive
for select
to public
using ((( SELECT auth.uid() AS uid) = user_id));



