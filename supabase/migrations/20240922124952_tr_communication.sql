drop policy "allow all operations to authenticated users " on "public"."purchase_requests";

alter table "public"."purchase_requests" drop constraint "purchase_requests_client_id_fkey";

create table "public"."tr_communication" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "message" text,
    "messageId" text,
    "to" text,
    "subject" text,
    "tr_request_id" bigint
);


alter table "public"."tr_communication" enable row level security;

alter table "public"."purchase_requests" drop column "client_id";

alter table "public"."purchase_requests" add column "buying_rate" text;

alter table "public"."purchase_requests" add column "user_id" uuid not null default auth.uid();

CREATE UNIQUE INDEX tr_communication_pkey ON public.tr_communication USING btree (id);

alter table "public"."tr_communication" add constraint "tr_communication_pkey" PRIMARY KEY using index "tr_communication_pkey";

alter table "public"."purchase_requests" add constraint "purchase_requests_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."purchase_requests" validate constraint "purchase_requests_user_id_fkey";

alter table "public"."tr_communication" add constraint "tr_communication_tr_request_id_fkey" FOREIGN KEY (tr_request_id) REFERENCES tr_verifications(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."tr_communication" validate constraint "tr_communication_tr_request_id_fkey";

grant delete on table "public"."tr_communication" to "anon";

grant insert on table "public"."tr_communication" to "anon";

grant references on table "public"."tr_communication" to "anon";

grant select on table "public"."tr_communication" to "anon";

grant trigger on table "public"."tr_communication" to "anon";

grant truncate on table "public"."tr_communication" to "anon";

grant update on table "public"."tr_communication" to "anon";

grant delete on table "public"."tr_communication" to "authenticated";

grant insert on table "public"."tr_communication" to "authenticated";

grant references on table "public"."tr_communication" to "authenticated";

grant select on table "public"."tr_communication" to "authenticated";

grant trigger on table "public"."tr_communication" to "authenticated";

grant truncate on table "public"."tr_communication" to "authenticated";

grant update on table "public"."tr_communication" to "authenticated";

grant delete on table "public"."tr_communication" to "service_role";

grant insert on table "public"."tr_communication" to "service_role";

grant references on table "public"."tr_communication" to "service_role";

grant select on table "public"."tr_communication" to "service_role";

grant trigger on table "public"."tr_communication" to "service_role";

grant truncate on table "public"."tr_communication" to "service_role";

grant update on table "public"."tr_communication" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."purchase_requests"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."purchase_requests"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for users based on user_id"
on "public"."purchase_requests"
as permissive
for select
to public
using ((( SELECT auth.uid() AS uid) = user_id));



